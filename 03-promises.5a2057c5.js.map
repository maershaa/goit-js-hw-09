{"mappings":"AAmCsE,SAA7DA,EAAcC,EAAUC,GAE6C,MAAtEC,EAAgBC,KAAKC,SAAW,GAGkC,OAAjE,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KAELN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhDAQ,SAASC,cAAc,SAG/BC,iBAAiB,UAAU,SAAUC,GAE0CA,EAAhFC,iBAGkE,MAA9DC,EAAaC,SACjBN,SAASC,cAAc,uBAAuBM,OAE1CC,EAAOF,SAASN,SAASC,cAAc,sBAAsBM,OAC7DE,EAASH,SAASN,SAASC,cAAc,wBAAwBM,OAGhB,IAAlD,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAMUpB,EAJzBoB,EACHL,GAAcK,EAAI,GAAKF,GAKgBG,MAA7C,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,QAAQC,IAAI,uBAAqBtB,QAAiBC,MAAU,IAGlBsB,OAArC,EAACvB,SAAEA,EAAQC,MAAEA,MAClBoB,QAAQC,IAAI,sBAAoBtB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["// 1. Находим форму в HTML документе по классу \"form\".\nconst form = document.querySelector('.form');\n\n// 2. Добавляем обработчик события \"submit\" для формы.\nform.addEventListener('submit', function (e) {\n  // 3. Отменяем стандартное поведение браузера, чтобы страница не перезагружалась при отправке формы.\n  e.preventDefault();\n\n  // 4. Получаем значения из полей ввода для первой задержки, шага и количества промисов.\n  const firstDelay = parseInt(\n    document.querySelector('input[name=\"delay\"]').value\n  );\n  const step = parseInt(document.querySelector('input[name=\"step\"]').value);\n  const amount = parseInt(document.querySelector('input[name=\"amount\"]').value);\n\n  // 5. Создаем промисы в цикле в соответствии с введенными параметрами.\n  for (let i = 1; i <= amount; i++) {\n    // 6. Вычисляем номер создаваемого промиса (позицию) и задержку для этого промиса.\n    const position = i;\n    const delay = firstDelay + (i - 1) * step;\n\n    // 7. Вызываем функцию createPromise, передавая ей позицию и задержку.\n    createPromise(position, delay)\n      // 8. Если промис выполняется успешно, выполнится этот блок кода.\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      // 9. Если промис отклоняется, выполнится этот блок кода.\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\n// 10. Функция createPromise(position, delay) создает промис, который выполняется или отклоняется через заданное время.\nfunction createPromise(position, delay) {\n  // 11. Генерируем случайное число, чтобы определить, должен ли промис быть выполнен или отклонен.\n  const shouldResolve = Math.random() > 0.3;\n\n  // 12. Возвращаем новый промис, который разрешается или отклоняется через указанное время.\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // 13. Если shouldResolve равен true, промис разрешается с объектом, содержащим позицию и задержку.\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        // 14. Если shouldResolve равен false, промис отклоняется с объектом, содержащим позицию и задержку.\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","firstDelay","parseInt","value","step","amount","i","then","console","log","catch"],"version":3,"file":"03-promises.5a2057c5.js.map"}