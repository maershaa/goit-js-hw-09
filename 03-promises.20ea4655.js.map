{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAqDsE,SAA7DC,EAAcC,EAAUC,GAE6C,MAAtEC,EAAgBC,KAAKC,SAAW,GAGkC,OAAjE,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KAELN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA9DAQ,SAASC,cAAc,SAG/BC,iBAAiB,UAAU,SAAUC,GAE0CA,EAAhFC,iBAI+E,MAA3EC,EAAaC,SACjBN,SAASC,cAAc,uBAAuBM,OAE1CC,EAAOF,SAASN,SAASC,cAAc,sBAAsBM,OAC7DE,EAASH,SAASN,SAASC,cAAc,wBAAwBM,OAGqI,GAAxMC,EAAO,GAAKH,EAAa,GAAKI,GAAU,EAC1CrB,EAAAsB,OAAgBC,QAAQ,4BAG+B,IAAlD,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAAK,CAUUtB,EARzBsB,EAKHP,GAAcO,EAAI,GAAKJ,GAKgBK,MAA7C,EAACtB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAsB,OAAgBI,KACd,uBAAqBvB,QAAiBC,MAAU,IAIRuB,OAArC,EAACxB,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAsB,OAAgBC,QACd,sBAAoBpB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import * as Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\n// Этот код представляет собой создание и обработку нескольких промисов в соответствии с параметрами, введенными пользователем в форме.Как только все промисы завершатся(успешно или с ошибкой), результаты будут выведены в консоль.\n// 1. Находим форму в HTML документе по классу \"form\".\nconst form = document.querySelector('.form');\n\n// 2. Добавляем обработчик события \"submit\" для формы.\nform.addEventListener('submit', function (e) {\n  // 3. Отменяем стандартное поведение браузера, чтобы страница не перезагружалась при отправке формы.\n  e.preventDefault();\n\n  // 4. Получаем значения из полей ввода для первой задержки, шага и количества промисов.\n  // используем функцию parseInt(), чтобы преобразовать строку, содержащую значение из поля ввода, в целое число (integer)\n  const firstDelay = parseInt(\n    document.querySelector('input[name=\"delay\"]').value\n  );\n  const step = parseInt(document.querySelector('input[name=\"step\"]').value);\n  const amount = parseInt(document.querySelector('input[name=\"amount\"]').value);\n\n  // Код проверяет, если параметры, такие как step, delay, и amount, не удовлетворяют определенным условиям (например, step и delay не могут быть отрицательными, а amount должно быть больше нуля), то он выводит уведомление \"❌ Rejected promise\", указывая, что промис будет отклонен из-за некорректных параметров.\n  if (step < 0 || firstDelay < 0 || amount <= 0) {\n    Notiflix.Notify.failure(`❌ Rejected promise `);\n  } else {\n    // 5. Создаем промисы в цикле в соответствии с введенными параметрами.\n    for (let i = 1; i <= amount; i++) {\n      // 6. Вычисляем номер создаваемого промиса (позицию) и задержку для этого промиса.\n      const position = i;\n\n      // В данном участке кода firstDelay представляет собой первоначальную задержку (задержку для первого промиса),\n      // а step представляет собой шаг увеличения задержки для каждого последующего промиса.\n      // В этой формуле i представляет номер текущего промиса. Но так как мы начинаем с первого промиса (номер 1), чтобы получить правильную задержку для него, нам нужно вычесть 1. Таким образом, вычитая 1 из i, мы корректируем индексацию, чтобы первый промис имел правильную задержку, а последующие промисы имели правильные интервалы задержек с шагом step.\n      const delay = firstDelay + (i - 1) * step;\n\n      // 7. Вызываем функцию createPromise, передавая ей позицию и задержку.\n      createPromise(position, delay)\n        // 8. Если промис выполняется успешно, выполнится этот блок кода.\n        .then(({ position, delay }) => {\n          Notiflix.Notify.info(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        // 9. Если промис отклоняется, выполнится этот блок кода.\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n});\n\n// 10. Функция createPromise(position, delay) создает промис, который выполняется или отклоняется через заданное время.\nfunction createPromise(position, delay) {\n  // 11. Генерируем случайное число, чтобы определить, должен ли промис быть выполнен или отклонен.\n  const shouldResolve = Math.random() > 0.3;\n\n  // 12. Возвращаем новый промис, который разрешается или отклоняется через указанное время.\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // 13. Если shouldResolve равен true, промис разрешается с объектом, содержащим позицию и задержку.\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        // 14. Если shouldResolve равен false, промис отклоняется с объектом, содержащим позицию и задержку.\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","firstDelay","parseInt","value","step","amount","Notify","failure","i","then","info","catch"],"version":3,"file":"03-promises.20ea4655.js.map"}